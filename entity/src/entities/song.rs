//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    juniper :: GraphQLObject,
)]
#[sea_orm(table_name = "song")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub title: String,
    pub duration: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::release_track_history::Entity")]
    ReleaseTrackHistory,
    #[sea_orm(has_many = "super::song_credit::Entity")]
    SongCredit,
    #[sea_orm(has_many = "super::song_language::Entity")]
    SongLanguage,
    #[sea_orm(has_many = "super::song_localized_title::Entity")]
    SongLocalizedTitle,
}

impl Related<super::release_track_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReleaseTrackHistory.def()
    }
}

impl Related<super::song_credit::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SongCredit.def()
    }
}

impl Related<super::song_language::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SongLanguage.def()
    }
}

impl Related<super::song_localized_title::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SongLocalizedTitle.def()
    }
}

impl Related<super::language::Entity> for Entity {
    fn to() -> RelationDef {
        super::song_language::Relation::Language.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::song_language::Relation::Song.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
