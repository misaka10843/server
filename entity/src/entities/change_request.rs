//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::Serialize;

use super::sea_orm_active_enums::{
    ChangeRequestStatus, ChangeRequestType, EntityType,
};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    juniper :: GraphQLObject,
)]
#[sea_orm(table_name = "change_request")]
# [graphql (scalar = crate :: extension :: GqlScalarValue)]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub request_status: ChangeRequestStatus,
    pub request_type: ChangeRequestType,
    pub entity_type: EntityType,
    pub created_at: DateTimeWithTimeZone,
    pub handled_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::change_request_history::Entity")]
    ChangeRequestHistory,
    #[sea_orm(has_many = "super::change_request_user::Entity")]
    ChangeRequestUser,
}

impl Related<super::change_request_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChangeRequestHistory.def()
    }
}

impl Related<super::change_request_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChangeRequestUser.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
