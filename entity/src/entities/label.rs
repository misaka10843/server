//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use super::sea_orm_active_enums::DatePrecision;

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    juniper :: GraphQLObject,
)]
#[sea_orm(table_name = "label")]
# [graphql (scalar = crate :: extension :: GqlScalarValue)]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    pub founded_date: Option<Date>,
    pub founded_date_precision: DatePrecision,
    pub dissolved_date: Option<Date>,
    pub dissolved_date_precision: DatePrecision,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::label_founder::Entity")]
    LabelFounder,
    #[sea_orm(has_many = "super::label_founder_history::Entity")]
    LabelFounderHistory,
    #[sea_orm(has_many = "super::label_localized_name::Entity")]
    LabelLocalizedName,
    #[sea_orm(has_many = "super::release_catalog_number::Entity")]
    ReleaseCatalogNumber,
    #[sea_orm(has_many = "super::release_catalog_number_history::Entity")]
    ReleaseCatalogNumberHistory,
}

impl Related<super::label_founder::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LabelFounder.def()
    }
}

impl Related<super::label_founder_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LabelFounderHistory.def()
    }
}

impl Related<super::label_localized_name::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LabelLocalizedName.def()
    }
}

impl Related<super::release_catalog_number::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReleaseCatalogNumber.def()
    }
}

impl Related<super::release_catalog_number_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReleaseCatalogNumberHistory.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
