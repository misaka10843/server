//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::ArtistType;
use super::sea_orm_active_enums::DatePrecision;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    juniper :: GraphQLObject,
)]
#[sea_orm(table_name = "artist_history")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    pub artist_type: ArtistType,
    pub text_alias: Option<Vec<String>>,
    pub start_date: Option<Date>,
    pub start_date_precision: Option<DatePrecision>,
    pub end_date: Option<Date>,
    pub end_date_precision: Option<DatePrecision>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub is_deleted: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::artist_alias_history::Entity")]
    ArtistAliasHistory,
    #[sea_orm(has_many = "super::artist_link_history::Entity")]
    ArtistLinkHistory,
    #[sea_orm(has_many = "super::artist_localized_name_history::Entity")]
    ArtistLocalizedNameHistory,
    #[sea_orm(has_many = "super::group_member_history::Entity")]
    GroupMemberHistory,
}

impl Related<super::artist_alias_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArtistAliasHistory.def()
    }
}

impl Related<super::artist_link_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArtistLinkHistory.def()
    }
}

impl Related<super::artist_localized_name_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArtistLocalizedNameHistory.def()
    }
}

impl Related<super::group_member_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupMemberHistory.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
