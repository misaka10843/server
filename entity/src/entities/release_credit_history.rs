//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    juniper :: GraphQLObject,
)]
#[sea_orm(table_name = "release_credit_history")]
# [graphql (scalar = crate :: extension :: GqlScalarValue)]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub artist_id: i32,
    pub release_history_id: i32,
    pub role_id: i32,
    pub on: Option<Vec<i16>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::credit_role::Entity",
        from = "(Column::RoleId, Column::RoleId)",
        to = "(super::credit_role::Column::Id, super::credit_role::Column::Id)",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    CreditRole,
    #[sea_orm(
        belongs_to = "super::release_history::Entity",
        from = "Column::ReleaseHistoryId",
        to = "super::release_history::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ReleaseHistory,
}

impl Related<super::credit_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CreditRole.def()
    }
}

impl Related<super::release_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReleaseHistory.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
