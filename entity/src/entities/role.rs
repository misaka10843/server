//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    juniper :: GraphQLObject,
)]
#[sea_orm(table_name = "role")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::group_member_role::Entity")]
    GroupMemberRole,
    #[sea_orm(has_many = "super::group_member_role_history::Entity")]
    GroupMemberRoleHistory,
    #[sea_orm(has_many = "super::user_role::Entity")]
    UserRole,
}

impl Related<super::group_member_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupMemberRole.def()
    }
}

impl Related<super::group_member_role_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupMemberRoleHistory.def()
    }
}

impl Related<super::user_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserRole.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_role::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_role::Relation::Role.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
