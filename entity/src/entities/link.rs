//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::MediaPlatform;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    juniper :: GraphQLObject,
)]
#[sea_orm(table_name = "link")]
# [graphql (scalar = crate :: extension :: GqlScalarValue)]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub platform: MediaPlatform,
    #[sea_orm(column_type = "Text", unique)]
    pub url: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::artist_link::Entity")]
    ArtistLink,
    #[sea_orm(has_many = "super::artist_link_history::Entity")]
    ArtistLinkHistory,
}

impl Related<super::artist_link::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArtistLink.def()
    }
}

impl Related<super::artist_link_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArtistLinkHistory.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
